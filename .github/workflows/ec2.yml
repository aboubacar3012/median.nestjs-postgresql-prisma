name: Workflow de Déploiement EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Étape pour configurer les identifiants AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    # Étape pour décrire les instances EC2 avec le tag project=median
    - name: Describe EC2 instances with tag project=median
      id: describe-instances
      run: |
        aws ec2 describe-instances --filters "Name=tag:project,Values=median" --region eu-west-3 --query "Reservations[*].Instances[*].InstanceId" --output text > instance_ids.txt

    # Étape pour vérifier si les instances EC2 sont déjà en cours d'exécution
    - name: Check if EC2 instances are running
      id: check-instances
      run: |
        instance_ids=$(cat instance_ids.txt)
        aws ec2 describe-instances --instance-ids $instance_ids --region eu-west-3 --query "Reservations[*].Instances[*].State.Name" --output text > instance_states.txt
        if grep -q "running" instance_states.txt; then
          echo "Instances are already running" > instances_running.txt
        else
          echo "Instances are not running" > instances_running.txt
        fi

    # Étape pour démarrer les instances EC2 si elles ne sont pas déjà en cours d'exécution
    - name: Start EC2 instances
      if: steps.check-instances.outputs.instances_running != 'Instances are already running'
      run: |
        instance_ids=$(cat instance_ids.txt)
        aws ec2 start-instances --instance-ids $instance_ids --region eu-west-3

    # Étape pour attendre que les instances EC2 soient en cours d'exécution
    - name: Wait for EC2 instances to be running
      run: |
        instance_ids=$(cat instance_ids.txt)
        for instance_id in $instance_ids; do
          aws ec2 wait instance-running --instance-ids $instance_id --region eu-west-3
        done

    # Étape pour cloner le dépôt et construire l'image Docker
    - name: Clone repository and build Docker image
      run: |
        git clone https://github.com/aboubacar3012/median.nestjs-postgresql-prisma.git
        cd median.nestjs-postgresql-prisma/
        docker build -t median.nestjs-postgresql-prisma .

    # Étape pour exécuter le conteneur Docker
    - name: Run Docker container
      run: |
        docker run -d -p 3000:3000 median.nestjs-postgresql-prisma
